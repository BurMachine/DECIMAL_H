/*#ifndef SRC_S21_DECIMAL_H_
#define SRC_S21_DECIMAL_H_*/
#ifndef _S21_DECIMAL_H_
#define _S21_DECIMAL_H_
#define TRUE  1
#define FALSE  0
#define s21_ok 0
#define s21_convert_error  1

typedef struct {
<<<<<<< HEAD
 unsigned int bits[4];
=======
 unsigned int  bits[4];
>>>>>>> ca685fd6c2a7df7dc47a4e8642d930e33045db80
} s21_decimal;

typedef union {
  float fl;
  int ui;
}bitsun;

typedef enum{
  S21_NORMAL_VALUE,
  S21_INFINITY,
  S21_NEGATIVE_INFINITY,
  S21_NAN
}value_type;

static const char *const binary_powers_of_ten[29] = {
    [0] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    [1] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010",
    [2] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100100",
    [3] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111101000",
    [4] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000010011100010000",
    [5] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000000011000011010100000",
    [6] =
        "000000000000000000000000000000000000000000000000000000000000000000000000000011110100001001000000",
    [7] =
        "000000000000000000000000000000000000000000000000000000000000000000000000100110001001011010000000",
    [8] =
        "000000000000000000000000000000000000000000000000000000000000000000000101111101011110000100000000",
    [9] =
        "000000000000000000000000000000000000000000000000000000000000000000111011100110101100101000000000",
    [10] =
        "000000000000000000000000000000000000000000000000000000000000001001010100000010111110010000000000",
    [11] =
        "000000000000000000000000000000000000000000000000000000000001011101001000011101101110100000000000",
    [12] =
        "000000000000000000000000000000000000000000000000000000001110100011010100101001010001000000000000",
    [13] =
        "000000000000000000000000000000000000000000000000000010010001100001001110011100101010000000000000",
    [14] =
        "000000000000000000000000000000000000000000000000010110101111001100010000011110100100000000000000",
    [15] =
        "000000000000000000000000000000000000000000000011100011010111111010100100110001101000000000000000",
    [16] =
        "000000000000000000000000000000000000000000100011100001101111001001101111110000010000000000000000",
    [17] =
        "000000000000000000000000000000000000000101100011010001010111100001011101100010100000000000000000",
    [18] =
        "000000000000000000000000000000000000110111100000101101101011001110100111011001000000000000000000",
    [19] =
        "000000000000000000000000000000001000101011000111001000110000010010001001111010000000000000000000",
    [20] =
        "000000000000000000000000000001010110101111000111010111100010110101100011000100000000000000000000",
    [21] =
        "000000000000000000000000001101100011010111001001101011011100010111011110101000000000000000000000",
    [22] =
        "000000000000000000000010000111100001100111100000110010011011101010110010010000000000000000000000",
    [23] =
        "000000000000000000010101001011010000001011000111111000010100101011110110100000000000000000000000",
    [24] =
        "000000000000000011010011110000100001101111001110110011001110110110100001000000000000000000000000",
    [25] =
        "000000000000100001000101100101010001011000010100000000010100100001001010000000000000000000000000",
    [26] =
        "000000000101001010110111110100101101110011001000000011001101001011100100000000000000000000000000",
    [27] =
        "000000110011101100101110001111001001111111010000100000000011110011101000000000000000000000000000",
    [28] =
        "001000000100111111001110010111100011111000100101000000100110000100010000000000000000000000000000",
};

int get_scale(const s21_decimal *varPtr);
void set_sign(s21_decimal *a, int sign_value);
int get_sign(const s21_decimal *a);
void set_bit(s21_decimal *a, int bit_number, int value);
int get_bit(const s21_decimal a, int bit_number);
void set_scale(s21_decimal *varPtr, int scale);
int last_bit(s21_decimal number);
int offset_left(s21_decimal *num_ptr, int value_offset);
void init_struct(s21_decimal *varPtr);
void clear_bits(s21_decimal *varPtr);
void copy_bits(s21_decimal src, s21_decimal *dest);
s21_decimal div_only_bits(s21_decimal number_1, s21_decimal number_2, s21_decimal *buf);
s21_decimal bit_add(s21_decimal *a, s21_decimal *b, int *error_code);
void convert_to_addcode(s21_decimal *number_1);
int scale_equalize(s21_decimal *number1, s21_decimal *number2);
int negative(s21_decimal value_1, s21_decimal value_2);
void check_scale(s21_decimal *value_1, s21_decimal *value_2);
int getFloatSign(float *src);
int getFloatExp(float *src);
/* support bit function(not solution of the task) */
int is_greater_or_equal(s21_decimal dec1, s21_decimal dec2);
int is_equal_b(s21_decimal dec1, s21_decimal dec2);
int is_greater(s21_decimal num1, s21_decimal num2);
int is_less_b(s21_decimal num1, s21_decimal num2);
s21_decimal division_without_scale(s21_decimal num1, s21_decimal num2);
s21_decimal div_only_bits(s21_decimal number_1, s21_decimal number_2, s21_decimal *buf);
s21_decimal get_power_of_ten(int pow);


int s21_from_int_to_decimal(int src, s21_decimal *dst);
int s21_from_decimal_to_int(s21_decimal src, int *dst);
int s21_from_decimal_to_float(s21_decimal src, float *dst);
int s21_from_float_to_decimal(float src, s21_decimal *dst);

int s21_add(s21_decimal value_1, s21_decimal value_2, s21_decimal *result);
int s21_sub(s21_decimal value_1, s21_decimal value_2, s21_decimal *result);
int s21_mul(s21_decimal value_1, s21_decimal value_2, s21_decimal *result);
int s21_div(s21_decimal value_1, s21_decimal value_2, s21_decimal *result);
int s21_mod(s21_decimal value_1, s21_decimal value_2, s21_decimal *result);


int s21_is_greater(s21_decimal value_1, s21_decimal value_2);
int s21_is_less(s21_decimal dec1, s21_decimal dec2);
int s21_is_equal(s21_decimal value_1, s21_decimal value_2);
int s21_is_not_equal(s21_decimal value_1, s21_decimal value_2);
int s21_is_greater_or_equal(s21_decimal value_1, s21_decimal value_2);
int s21_is_less_or_equal(s21_decimal value_1, s21_decimal value_2);


int s21_truncate(s21_decimal value, s21_decimal *result);
int s21_negate(s21_decimal value, s21_decimal *result); 
int s21_floor(s21_decimal value, s21_decimal *result);
#endif // _S21_DECIMAL_H_
//#endif // SRC_S21_DECIMAL_H_